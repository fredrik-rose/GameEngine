<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="214" onload="init(evt)" viewBox="0 0 1200 214" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<!-- Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples. -->
<!-- NOTES:  -->
<defs>
	<linearGradient id="background" y1="0" y2="1" x1="0" x2="0" >
		<stop stop-color="#eeeeee" offset="5%" />
		<stop stop-color="#eeeeb0" offset="95%" />
	</linearGradient>
</defs>
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search, #ignorecase { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show, #ignorecase:hover, #ignorecase.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching, currentSearchTerm, ignorecase, ignorecaseBtn;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		ignorecaseBtn = document.getElementById("ignorecase");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
		currentSearchTerm = null;

		// use GET parameters to restore a flamegraphs state.
		var params = get_params();
		if (params.x && params.y)
			zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
                if (params.s) search(params.s);
	}

	// event listeners
	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom(true);
			zoom(target);
			if (!document.querySelector('.parent')) {
				// we have basically done a clearzoom so clear the url
				var params = get_params();
				if (params.x) delete params.x;
				if (params.y) delete params.y;
				history.replaceState(null, null, parse_params(params));
				unzoombtn.classList.add("hide");
				return;
			}

			// set parameters for zoom state
			var el = target.querySelector("rect");
			if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
				var params = get_params()
				params.x = el.attributes._orig_x.value;
				params.y = el.attributes.y.value;
				history.replaceState(null, null, parse_params(params));
			}
		}
		else if (e.target.id == "unzoom") clearzoom();
		else if (e.target.id == "search") search_prompt();
		else if (e.target.id == "ignorecase") toggle_ignorecase();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	// ctrl-I to toggle case-sensitive search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
		else if (e.ctrlKey && e.keyCode === 73) {
			e.preventDefault();
			toggle_ignorecase();
		}
	}, false)

	// functions
	function get_params() {
		var params = {};
		var paramsarr = window.location.search.substr(1).split('&');
		for (var i = 0; i < paramsarr.length; ++i) {
			var tmp = paramsarr[i].split("=");
			if (!tmp[0] || !tmp[1]) continue;
			params[tmp[0]]  = decodeURIComponent(tmp[1]);
		}
		return params;
	}
	function parse_params(params) {
		var uri = "?";
		for (var key in params) {
			uri += key + '=' + encodeURIComponent(params[key]) + '&';
		}
		if (uri.slice(-1) == "&")
			uri = uri.substring(0, uri.length - 1);
		if (uri == '?')
			uri = window.location.href.split('?')[0];
		return uri;
	}
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		var sl = t.getSubStringLength(0, txt.length);
		// check if only whitespace or if we can fit the entire string into width w
		if (/^ *$/.test(txt) || sl < w)
			return;

		// this isn't perfect, but gives a good starting point
		// and avoids calling getSubStringLength too often
		var start = Math.floor((w/sl) * txt.length);
		for (var x = start; x > 0; x = x-2) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
		search();
	}
	function unzoom(dont_update_text) {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			if(!dont_update_text) update_text(el[i]);
		}
		search();
	}
	function clearzoom() {
		unzoom();

		// remove zoom state
		var params = get_params();
		if (params.x) delete params.x;
		if (params.y) delete params.y;
		history.replaceState(null, null, parse_params(params));
	}

	// search
	function toggle_ignorecase() {
		ignorecase = !ignorecase;
		if (ignorecase) {
			ignorecaseBtn.classList.add("show");
		} else {
			ignorecaseBtn.classList.remove("show");
		}
		reset_search();
		search();
	}
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
		var params = get_params();
		delete params.s;
		history.replaceState(null, null, parse_params(params));
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)"
			    + (ignorecase ? ", ignoring case" : "")
			    + "\nPress Ctrl-i to toggle case sensitivity", "");
			if (term != null) search(term);
		} else {
			reset_search();
			searching = 0;
			currentSearchTerm = null;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		if (term) currentSearchTerm = term;

		var re = new RegExp(currentSearchTerm, ignorecase ? 'i' : '');
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;
		var params = get_params();
		params.s = currentSearchTerm;
		history.replaceState(null, null, parse_params(params));

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0.0" y="0" width="1200.0" height="214.0" fill="url(#background)"  />
<text id="title" x="600.00" y="24" >Flame Graph</text>
<text id="details" x="10.00" y="197" > </text>
<text id="unzoom" x="10.00" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090.00" y="24" >Search</text>
<text id="ignorecase" x="1174.00" y="24" >ic</text>
<text id="matched" x="1090.00" y="197" > </text>
<g id="frames">
<g >
<title>VEC_dot_product (122,367,098 samples, 1.33%)</title><rect x="978.5" y="69" width="15.7" height="15.0" fill="rgb(247,133,10)" rx="2" ry="2" />
<text  x="981.52" y="79.5" ></text>
</g>
<g >
<title>VEC_get_element (1,003,009 samples, 0.01%)</title><rect x="1072.4" y="53" width="0.1" height="15.0" fill="rgb(212,183,26)" rx="2" ry="2" />
<text  x="1075.39" y="63.5" ></text>
</g>
<g >
<title>[GameProfiler] (58,174,522 samples, 0.63%)</title><rect x="736.0" y="53" width="7.4" height="15.0" fill="rgb(213,124,27)" rx="2" ry="2" />
<text  x="738.98" y="63.5" ></text>
</g>
<g >
<title>VEC_set_element (33,099,297 samples, 0.36%)</title><rect x="353.5" y="37" width="4.2" height="15.0" fill="rgb(208,91,6)" rx="2" ry="2" />
<text  x="356.47" y="47.5" ></text>
</g>
<g >
<title>VEC_set_element (69,207,621 samples, 0.75%)</title><rect x="1015.9" y="69" width="8.8" height="15.0" fill="rgb(246,38,49)" rx="2" ry="2" />
<text  x="1018.89" y="79.5" ></text>
</g>
<g >
<title>CST_world_coordinate_to_image_coordinate (2,312,938,754 samples, 25.09%)</title><rect x="509.5" y="69" width="296.1" height="15.0" fill="rgb(254,125,41)" rx="2" ry="2" />
<text  x="512.48" y="79.5" >CST_world_coordinate_to_image_coordinate</text>
</g>
<g >
<title>VEC_get_element (62,186,558 samples, 0.67%)</title><rect x="361.7" y="53" width="7.9" height="15.0" fill="rgb(220,71,25)" rx="2" ry="2" />
<text  x="364.69" y="63.5" ></text>
</g>
<g >
<title>VEC_set_element (1,003,009 samples, 0.01%)</title><rect x="1072.5" y="53" width="0.1" height="15.0" fill="rgb(225,91,11)" rx="2" ry="2" />
<text  x="1075.51" y="63.5" ></text>
</g>
<g >
<title>_int_malloc (539,618,842 samples, 5.85%)</title><rect x="1120.9" y="133" width="69.1" height="15.0" fill="rgb(239,99,46)" rx="2" ry="2" />
<text  x="1123.92" y="143.5" >_int_ma..</text>
</g>
<g >
<title>__round (185,556,665 samples, 2.01%)</title><rect x="1081.5" y="85" width="23.8" height="15.0" fill="rgb(210,189,28)" rx="2" ry="2" />
<text  x="1084.50" y="95.5" >_..</text>
</g>
<g >
<title>_int_free (153,460,377 samples, 1.66%)</title><rect x="1033.5" y="69" width="19.6" height="15.0" fill="rgb(229,134,44)" rx="2" ry="2" />
<text  x="1036.48" y="79.5" ></text>
</g>
<g >
<title>_int_free (76,228,684 samples, 0.83%)</title><rect x="1105.3" y="85" width="9.7" height="15.0" fill="rgb(216,203,44)" rx="2" ry="2" />
<text  x="1108.26" y="95.5" ></text>
</g>
<g >
<title>MAT_matrix_vector_multiplication (31,093,279 samples, 0.34%)</title><rect x="357.7" y="53" width="4.0" height="15.0" fill="rgb(248,114,14)" rx="2" ry="2" />
<text  x="360.71" y="63.5" ></text>
</g>
<g >
<title>COORD_Coordinate3D_add (31,093,279 samples, 0.34%)</title><rect x="153.8" y="85" width="4.0" height="15.0" fill="rgb(217,198,21)" rx="2" ry="2" />
<text  x="156.81" y="95.5" ></text>
</g>
<g >
<title>[GameProfiler] (12,036,108 samples, 0.13%)</title><rect x="959.3" y="53" width="1.5" height="15.0" fill="rgb(243,108,20)" rx="2" ry="2" />
<text  x="962.26" y="63.5" ></text>
</g>
<g >
<title>MAT_matrix_vector_multiplication (637,913,724 samples, 6.92%)</title><rect x="251.5" y="37" width="81.7" height="15.0" fill="rgb(243,101,34)" rx="2" ry="2" />
<text  x="254.52" y="47.5" >MAT_matri..</text>
</g>
<g >
<title>MAT_matrix_vector_multiplication (44,132,396 samples, 0.48%)</title><rect x="969.4" y="69" width="5.7" height="15.0" fill="rgb(209,134,12)" rx="2" ry="2" />
<text  x="972.41" y="79.5" ></text>
</g>
<g >
<title>COORD_Coordinate3D_sub (31,093,279 samples, 0.34%)</title><rect x="224.8" y="69" width="4.0" height="15.0" fill="rgb(248,178,53)" rx="2" ry="2" />
<text  x="227.81" y="79.5" ></text>
</g>
<g >
<title>cfree@GLIBC_2.2.5 (46,138,414 samples, 0.50%)</title><rect x="1115.0" y="85" width="5.9" height="15.0" fill="rgb(215,137,1)" rx="2" ry="2" />
<text  x="1118.01" y="95.5" ></text>
</g>
<g >
<title>VEC_free (18,054,162 samples, 0.20%)</title><rect x="1072.8" y="85" width="2.3" height="15.0" fill="rgb(254,225,19)" rx="2" ry="2" />
<text  x="1075.77" y="95.5" ></text>
</g>
<g >
<title>CST_affine_transformation (1,100,300,873 samples, 11.94%)</title><rect x="228.8" y="69" width="140.8" height="15.0" fill="rgb(231,123,50)" rx="2" ry="2" />
<text  x="231.79" y="79.5" >CST_affine_transf..</text>
</g>
<g >
<title>CST_linear_transformation (19,057,171 samples, 0.21%)</title><rect x="1070.2" y="69" width="2.4" height="15.0" fill="rgb(248,1,53)" rx="2" ry="2" />
<text  x="1073.20" y="79.5" ></text>
</g>
<g >
<title>VEC_get_element (158,475,422 samples, 1.72%)</title><rect x="333.2" y="37" width="20.3" height="15.0" fill="rgb(239,118,10)" rx="2" ry="2" />
<text  x="336.18" y="47.5" ></text>
</g>
<g >
<title>MATH_clamp (48,144,432 samples, 0.52%)</title><rect x="963.2" y="69" width="6.2" height="15.0" fill="rgb(217,187,35)" rx="2" ry="2" />
<text  x="966.24" y="79.5" ></text>
</g>
<g >
<title>MAT_matrix_vector_multiplication (1,003,009 samples, 0.01%)</title><rect x="1072.6" y="69" width="0.2" height="15.0" fill="rgb(211,99,0)" rx="2" ry="2" />
<text  x="1075.64" y="79.5" ></text>
</g>
<g >
<title>VEC_alloc (27,081,243 samples, 0.29%)</title><rect x="975.1" y="69" width="3.4" height="15.0" fill="rgb(240,83,22)" rx="2" ry="2" />
<text  x="978.06" y="79.5" ></text>
</g>
<g >
<title>_int_malloc (182,547,638 samples, 1.98%)</title><rect x="130.4" y="117" width="23.4" height="15.0" fill="rgb(224,20,38)" rx="2" ry="2" />
<text  x="133.44" y="127.5" >_..</text>
</g>
<g >
<title>ILL_get_illumination (21,063,189 samples, 0.23%)</title><rect x="164.3" y="85" width="2.7" height="15.0" fill="rgb(222,224,48)" rx="2" ry="2" />
<text  x="167.34" y="95.5" ></text>
</g>
<g >
<title>VEC_normalize (26,078,234 samples, 0.28%)</title><rect x="1012.6" y="69" width="3.3" height="15.0" fill="rgb(249,60,45)" rx="2" ry="2" />
<text  x="1015.55" y="79.5" ></text>
</g>
<g >
<title>[unknown] (1,123,370,080 samples, 12.19%)</title><rect x="10.0" y="133" width="143.8" height="15.0" fill="rgb(233,219,38)" rx="2" ry="2" />
<text  x="13.00" y="143.5" >[unknown]</text>
</g>
<g >
<title>MAT_set_element (9,027,081 samples, 0.10%)</title><rect x="175.3" y="85" width="1.1" height="15.0" fill="rgb(232,196,9)" rx="2" ry="2" />
<text  x="178.25" y="95.5" ></text>
</g>
<g >
<title>__sincos (16,048,144 samples, 0.17%)</title><rect x="68.4" y="117" width="2.1" height="15.0" fill="rgb(211,49,9)" rx="2" ry="2" />
<text  x="71.42" y="127.5" ></text>
</g>
<g >
<title>__fmax (26,078,234 samples, 0.28%)</title><rect x="1028.0" y="69" width="3.3" height="15.0" fill="rgb(251,5,38)" rx="2" ry="2" />
<text  x="1030.96" y="79.5" ></text>
</g>
<g >
<title>VEC_set_element (29,087,261 samples, 0.32%)</title><rect x="732.3" y="53" width="3.7" height="15.0" fill="rgb(242,18,13)" rx="2" ry="2" />
<text  x="735.25" y="63.5" ></text>
</g>
<g >
<title>VEC_normalize (465,396,176 samples, 5.05%)</title><rect x="899.7" y="53" width="59.6" height="15.0" fill="rgb(228,219,41)" rx="2" ry="2" />
<text  x="902.69" y="63.5" >VEC_no..</text>
</g>
<g >
<title>VEC_free (47,141,423 samples, 0.51%)</title><rect x="994.2" y="69" width="6.0" height="15.0" fill="rgb(247,67,40)" rx="2" ry="2" />
<text  x="997.19" y="79.5" ></text>
</g>
<g >
<title>TORUS_create (21,063,189 samples, 0.23%)</title><rect x="1070.1" y="85" width="2.7" height="15.0" fill="rgb(233,64,26)" rx="2" ry="2" />
<text  x="1073.07" y="95.5" ></text>
</g>
<g >
<title>MAT_matrix_vector_multiplication (13,039,117 samples, 0.14%)</title><rect x="1070.7" y="53" width="1.7" height="15.0" fill="rgb(208,142,19)" rx="2" ry="2" />
<text  x="1073.72" y="63.5" ></text>
</g>
<g >
<title>__fmin (17,051,153 samples, 0.18%)</title><rect x="1031.3" y="69" width="2.2" height="15.0" fill="rgb(211,76,3)" rx="2" ry="2" />
<text  x="1034.30" y="79.5" ></text>
</g>
<g >
<title>[GameProfiler] (23,069,207 samples, 0.25%)</title><rect x="1075.1" y="85" width="2.9" height="15.0" fill="rgb(253,62,18)" rx="2" ry="2" />
<text  x="1078.08" y="95.5" ></text>
</g>
<g >
<title>CST_linear_transformation (1,092,276,801 samples, 11.85%)</title><rect x="369.6" y="69" width="139.9" height="15.0" fill="rgb(207,52,54)" rx="2" ry="2" />
<text  x="372.65" y="79.5" >CST_linear_transf..</text>
</g>
<g >
<title>main (7,554,663,788 samples, 81.96%)</title><rect x="153.8" y="117" width="967.1" height="15.0" fill="rgb(212,25,5)" rx="2" ry="2" />
<text  x="156.81" y="127.5" >main</text>
</g>
<g >
<title>__fmin (19,057,171 samples, 0.21%)</title><rect x="960.8" y="53" width="2.4" height="15.0" fill="rgb(227,31,1)" rx="2" ry="2" />
<text  x="963.81" y="63.5" ></text>
</g>
<g >
<title>VEC_get_element (130,391,170 samples, 1.41%)</title><rect x="487.3" y="53" width="16.7" height="15.0" fill="rgb(228,33,37)" rx="2" ry="2" />
<text  x="490.26" y="63.5" ></text>
</g>
<g >
<title>_int_free (468,405,203 samples, 5.08%)</title><rect x="70.5" y="117" width="59.9" height="15.0" fill="rgb(251,9,34)" rx="2" ry="2" />
<text  x="73.48" y="127.5" >_int_f..</text>
</g>
<g >
<title>MAT_matrix_vector_multiplication (1,106,318,927 samples, 12.00%)</title><rect x="552.7" y="53" width="141.7" height="15.0" fill="rgb(244,106,31)" rx="2" ry="2" />
<text  x="555.75" y="63.5" >MAT_matrix_vector_..</text>
</g>
<g >
<title>__libc_calloc (455,366,086 samples, 4.94%)</title><rect x="10.1" y="117" width="58.3" height="15.0" fill="rgb(224,3,47)" rx="2" ry="2" />
<text  x="13.13" y="127.5" >__libc..</text>
</g>
<g >
<title>MATH_clamp (22,066,198 samples, 0.24%)</title><rect x="832.8" y="53" width="2.8" height="15.0" fill="rgb(205,111,48)" rx="2" ry="2" />
<text  x="835.79" y="63.5" ></text>
</g>
<g >
<title>GAME_run (7,554,663,788 samples, 81.96%)</title><rect x="153.8" y="101" width="967.1" height="15.0" fill="rgb(231,123,25)" rx="2" ry="2" />
<text  x="156.81" y="111.5" >GAME_run</text>
</g>
<g >
<title>CST_linear_transformation (965,897,667 samples, 10.48%)</title><rect x="234.1" y="53" width="123.6" height="15.0" fill="rgb(216,174,51)" rx="2" ry="2" />
<text  x="237.06" y="63.5" >CST_linear_tran..</text>
</g>
<g >
<title>MAT_matrix_vector_multiplication (748,244,714 samples, 8.12%)</title><rect x="391.5" y="53" width="95.8" height="15.0" fill="rgb(221,1,10)" rx="2" ry="2" />
<text  x="394.48" y="63.5" >MAT_matrix_..</text>
</g>
<g >
<title>__fmax (27,081,243 samples, 0.29%)</title><rect x="1078.0" y="85" width="3.5" height="15.0" fill="rgb(223,40,27)" rx="2" ry="2" />
<text  x="1081.03" y="95.5" ></text>
</g>
<g >
<title>__libc_start_main (7,554,663,788 samples, 81.96%)</title><rect x="153.8" y="133" width="967.1" height="15.0" fill="rgb(254,83,40)" rx="2" ry="2" />
<text  x="156.81" y="143.5" >__libc_start_main</text>
</g>
<g >
<title>_IO_file_overflow@@GLIBC_2.2.5 (1,003,009 samples, 0.01%)</title><rect x="10.0" y="117" width="0.1" height="15.0" fill="rgb(223,136,43)" rx="2" ry="2" />
<text  x="13.00" y="127.5" ></text>
</g>
<g >
<title>VEC_norm (500,501,491 samples, 5.43%)</title><rect x="835.6" y="53" width="64.1" height="15.0" fill="rgb(243,141,2)" rx="2" ry="2" />
<text  x="838.61" y="63.5" >VEC_norm</text>
</g>
<g >
<title>VEC_free (21,063,189 samples, 0.23%)</title><rect x="707.9" y="53" width="2.7" height="15.0" fill="rgb(217,227,12)" rx="2" ry="2" />
<text  x="710.86" y="63.5" ></text>
</g>
<g >
<title>CST_affine_transformation (20,060,180 samples, 0.22%)</title><rect x="157.8" y="85" width="2.6" height="15.0" fill="rgb(212,41,18)" rx="2" ry="2" />
<text  x="160.79" y="95.5" ></text>
</g>
<g >
<title>cfree@GLIBC_2.2.5 (56,168,504 samples, 0.61%)</title><rect x="798.4" y="53" width="7.2" height="15.0" fill="rgb(215,36,15)" rx="2" ry="2" />
<text  x="801.38" y="63.5" ></text>
</g>
<g >
<title>[GameProfiler] (25,075,225 samples, 0.27%)</title><rect x="1024.7" y="69" width="3.3" height="15.0" fill="rgb(220,171,46)" rx="2" ry="2" />
<text  x="1027.75" y="79.5" ></text>
</g>
<g >
<title>VEC_alloc (105,315,945 samples, 1.14%)</title><rect x="694.4" y="53" width="13.5" height="15.0" fill="rgb(253,167,41)" rx="2" ry="2" />
<text  x="697.37" y="63.5" ></text>
</g>
<g >
<title>GameProfiler (9,217,652,710 samples, 100.00%)</title><rect x="10.0" y="149" width="1180.0" height="15.0" fill="rgb(227,177,47)" rx="2" ry="2" />
<text  x="13.00" y="159.5" >GameProfiler</text>
</g>
<g >
<title>CST_linear_transformation (19,057,171 samples, 0.21%)</title><rect x="160.4" y="85" width="2.4" height="15.0" fill="rgb(237,29,39)" rx="2" ry="2" />
<text  x="163.36" y="95.5" ></text>
</g>
<g >
<title>VEC_get_element (96,288,864 samples, 1.04%)</title><rect x="1000.2" y="69" width="12.4" height="15.0" fill="rgb(251,55,29)" rx="2" ry="2" />
<text  x="1003.22" y="79.5" ></text>
</g>
<g >
<title>_int_free (87,261,783 samples, 0.95%)</title><rect x="787.2" y="53" width="11.2" height="15.0" fill="rgb(232,54,54)" rx="2" ry="2" />
<text  x="790.21" y="63.5" ></text>
</g>
<g >
<title>VEC_get_element (169,508,521 samples, 1.84%)</title><rect x="710.6" y="53" width="21.7" height="15.0" fill="rgb(213,8,54)" rx="2" ry="2" />
<text  x="713.55" y="63.5" >V..</text>
</g>
<g >
<title>MATH_clamp (20,060,180 samples, 0.22%)</title><rect x="167.0" y="85" width="2.6" height="15.0" fill="rgb(234,4,5)" rx="2" ry="2" />
<text  x="170.03" y="95.5" ></text>
</g>
<g >
<title>all (9,217,652,710 samples, 100%)</title><rect x="10.0" y="165" width="1180.0" height="15.0" fill="rgb(254,67,21)" rx="2" ry="2" />
<text  x="13.00" y="175.5" ></text>
</g>
<g >
<title>ILL_get_illumination (1,231,695,052 samples, 13.36%)</title><rect x="805.6" y="69" width="157.6" height="15.0" fill="rgb(215,49,24)" rx="2" ry="2" />
<text  x="808.57" y="79.5" >ILL_get_illumination</text>
</g>
<g >
<title>MAT_get_element (44,132,396 samples, 0.48%)</title><rect x="169.6" y="85" width="5.7" height="15.0" fill="rgb(230,134,48)" rx="2" ry="2" />
<text  x="172.60" y="95.5" ></text>
</g>
<g >
<title>CST_world_coordinate_to_image_coordinate (12,036,108 samples, 0.13%)</title><rect x="162.8" y="85" width="1.5" height="15.0" fill="rgb(243,32,51)" rx="2" ry="2" />
<text  x="165.80" y="95.5" ></text>
</g>
<g >
<title>cfree@GLIBC_2.2.5 (128,385,152 samples, 1.39%)</title><rect x="1053.1" y="69" width="16.5" height="15.0" fill="rgb(212,29,49)" rx="2" ry="2" />
<text  x="1056.13" y="79.5" ></text>
</g>
<g >
<title>VEC_set_element (43,129,387 samples, 0.47%)</title><rect x="504.0" y="53" width="5.5" height="15.0" fill="rgb(207,228,53)" rx="2" ry="2" />
<text  x="506.96" y="63.5" ></text>
</g>
<g >
<title>SPHERE_create (4,012,036 samples, 0.04%)</title><rect x="1069.6" y="85" width="0.5" height="15.0" fill="rgb(211,162,0)" rx="2" ry="2" />
<text  x="1072.56" y="95.5" ></text>
</g>
<g >
<title>__libc_calloc (342,026,069 samples, 3.71%)</title><rect x="743.4" y="53" width="43.8" height="15.0" fill="rgb(245,8,32)" rx="2" ry="2" />
<text  x="746.42" y="63.5" >__li..</text>
</g>
<g >
<title>REND_render (6,976,930,604 samples, 75.69%)</title><rect x="176.4" y="85" width="893.2" height="15.0" fill="rgb(235,91,32)" rx="2" ry="2" />
<text  x="179.41" y="95.5" >REND_render</text>
</g>
</g>
</svg>
